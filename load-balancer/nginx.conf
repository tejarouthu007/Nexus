worker_processes 1;

events {
    worker_connections 1024;
}

http {
    resolver 8.8.8.8 ipv6=off;
    lua_shared_dict backend_map 10m;

    init_worker_by_lua_block {
        math.randomseed(os.time() + ngx.worker.pid())
    }

    server {
        listen 9000;
        server_name localhost;

        # ================================
        # WebSocket Endpoint - /socket.io/
        # Sticky based on roomId
        # ================================
        location /socket.io/ {
            set $target_backend_url "";

            access_by_lua_block {
                local args = ngx.req.get_uri_args()
                local room_id = args["roomId"]

                if not room_id then
                    ngx.log(ngx.ERR, "Missing roomId")
                    return ngx.exit(400)
                end

                local hash = 0
                for i = 1, #room_id do
                    hash = hash + string.byte(room_id, i)
                end

                local backend_idx = hash % 3

                if backend_idx == 0 then
                    ngx.var.target_backend_url = "https://nexus-xvyr.onrender.com";
                elseif backend_idx == 1 then
                    ngx.var.target_backend_url = "https://nexus-1-wfte.onrender.com";
                else
                    ngx.var.target_backend_url = "https://nexus-2-l3xr.onrender.com";
                end
            }

            # Remove upstream CORS headers to avoid duplication
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;

            # Preflight CORS
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' $http_origin always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain; charset=UTF-8';
                return 204;
            }

            # Actual CORS headers
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_ssl_server_name on;

            proxy_pass $target_backend_url;
        }

        # ================================
        # API - Random Load Balance
        # ================================
        location ^~ /api/ai/generate {
            set $target_backend_url "";

            access_by_lua_block {
                local idx = math.random(1, 3)
                if idx == 1 then
                    ngx.var.target_backend_url = "https://nexus-xvyr:10000";
                elseif idx == 2 then
                    ngx.var.target_backend_url = "https://nexus-1-wfte:10000";
                else
                    ngx.var.target_backend_url = "https://nexus-2-l3xr:10000";
                end
            }

            # Remove upstream CORS headers to avoid duplication
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            # Preflight CORS
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' $http_origin always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
                add_header 'Access-Control-Max-Age' 3600;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain; charset=UTF-8';
                return 204;
            }

            # Actual CORS headers
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_ssl_server_name on;

            proxy_pass $target_backend_url;
        }
    }
}
